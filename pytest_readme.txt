Файлы, находящиеся в одном пространстве и содержащие в себе тесты должны начинаться с ключевого слова test_

@pytest.fixture – данная фикстура обозначает, что далее я прописываю те действия, которые будут выполнены ДО исполнения
тестов.

@pytest.fixture
def set_up():
    print("Выполнение входа на сайт")

Чтобы при запуске тестов выполнились действия из @pytest.fixture её нужно прописать в тесте:
def test_sending_mail_1(set_up):
    print("Письмо отправлено")

И тогда порядок выполнения будет такой:
1. def set_up
2. def test_sending_mail_1

# Функция set_up() выполнится столько раз, сколько будет запущено тестов с её указанием: def test_sending_mail_1(set_up),
def test_sending_mail_2(set_up) – set_up выполнится дважды, перед каждым запуском теста test_sending_mail_n #

Так же фикстура set_up будет запускаться только внутри одного файла, в том, в котором она находится.

Условный оператор yield – позволяет выполнить действие после прохождения теста.
Последовательность выполнения этой конструкции:

@pytest.fixture
def set_up():
    print("Выполнение входа на сайт")
    yield
    print("Выход из системы")

def test_sending_mail_1(set_up):
    print("Письмо отправлено")

def test_sending_mail_2(set_up):
    print("Письмо отправлено")

1. set_up – выполнится вход в систему
2. test_sending_mail_1 – отправлено письмо из первого теста
3. Произведён выход из системы – шаги из set_up() после оператора yield
4. set_up – выполнится вход в систему
5. test_sending_mail_2 – отправлено письмо из второго теста
6. Произведён выход из системы – шаги из set_up() после оператора yield


Файл conftest.py – файл конфигурации.
В него я перенашу фикстуры, которые мне необходимо запускать перед (или после) выполнением тестов, причем использовать
фикстуру из файла conftest.py можно в любом файле test_, находящемся внутри одной папки (в моем случае внутри папки tests).

В каждой папки с тестами внутри одного пространства нужно создавать свой файл conftest.py


Аргумент scope (scope="module") – в сочетании с оператором yield, позволяет выполнять шаги до начала выполнения всех тестов и после выполнения
всех запущенных тестов:

@pytest.fixture
def set_up():
    print("Выполнение входа на сайт")
    yield
    print("Выход из системы")

@pytest.fixture(scope="module")
def some():
    print("Начало")
    yield
    print("Конец тестов")

def test_sending_mail_1(set_up, some):
    print("Mail sending")

def test_sending_mail_2(set_up, some):
    print("Mail sending")

Шаги выполнения:
1. Сначала выполнятся шаги из some() – Начало
2. Затем вход на сайт из set_up()
3. Далее выполняется первый тест из test_sending_mail_1
4. Выполняется код после оператора yield в set_up() – Выход из системы
5. Переход ко второму тесту
6. Шаги из set_up() – Выполнение входа на сайт
7. Шаги из теста test_sending_mail_2
8. Выполняется код после оператора yield в set_up() – Выход из системы
9. Шаги после оператора yield в some() – Конец тестов


При установке параметра function у аргумента scope немного меняется последовательность выполнения кода:
@pytest.fixture
def set_up():
    print("Выполнение входа на сайт")
    yield
    print("Выход из системы")

@pytest.fixture(scope="function")
def some():
    print("Начало")
    yield
    print("Конец тестов")

def test_sending_mail_1(set_up, some):
    print("Mail sending")

def test_sending_mail_2(set_up, some):
    print("Mail sending")

1. Сначала работает set_up() до yield – Выполнение входа на сайт
2. Затем работает some() до yield – Начало
3. Выполнение первого теста test_sending_mail_1
4. Выполнение кода в some() после yield – Конец тестов
5. Выполнение кода в set_up() после yield – Выход из системы

Для следующего теста test_sending_mail_2 последовательность та же, что и для test_sending_mail_1


### Фикстуры создаются до начала выполнения тестов, а вот уничтожаются в зависимости от того, какое значение имеет аргумент
scope ###

scope="function" – фикстура уничтожается в конце каждого теста, где она использовалась (значение по-умолчанию)
scope="module" – фикстура уничтожается во время завершения последнего теста модуля (файл с тестами – последний тест в последнем запущенном
файле в папке с тестами)

Подробнее: https://pytest-docs-ru.readthedocs.io/ru/latest/fixture.html